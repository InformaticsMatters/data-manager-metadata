@startuml
class Metadata {
    *dataset_name : String
    *dataset_uuid : String
    *created_by : String
    description : String
    created : timestamp
    last_updated : timestamp
    annotations : list
    get/set_dataset_name()
    get/set_dataset_uuid()
    get/set_dataset_created_by()
    get/set_dataset_description()
    get_annotation(position) : object
    add_annotation(object)
    get_annotations_dict() : dict
    get_annotations_json() : json
    add_annotations(json)
    get_json_schema(): dict
    get_compiled_fields(): dict
    get_labels(): dict
    to_dict()
    to_json()
}
note right: Metadata is intended\nto be stored with a dataset.\nIt will be a collection of\ndataset descriptive/\nstructural metadata and annotations.

abstract class Annotation {
    type : String
    created : timestamp
    to_dict()
    to_json()
}
note right: Annotation types that can be\nadded to the metadata

class PropertyChangeAnnotation {
    *property : String
    previous_value : String
    to_dict()
}
note left: Annotation added\nwhen Metadata\nproperty has changed.

class LabelAnnotation {
    *label : String
    value : String
    active : Boolean
    to_dict()
}

class TagAnnotation {
    rule : regexString
    groups : integer
    columns : list
    set_columns()
    get_columns()
    add_tags(text)
    to_dict()
}
note left: Not currently\nimplemented

class FieldsDescriptorAnnotation {
    origin : String
    description : String
    properties : Dict
    get/validate_origin()
    get/validate_description()
    add/validate_field(name, active, type, description)
    get_field(name) : dict
    add_fields(dict)
    get_fields() : dict
    to_dict()
}

class ServiceExecutionAnnotation {
    *service : String
    *service_version : String
    *service_user : String
    *service_description : String
    *service_ref : String
    service_parameters : Dict
    get/validate_service()
    get/validate_service_version()
    get/validate_service_user()
    get/validate_service_description()
    get/validate_service_ref()
    get/set_parameters()
    to_yaml()
    to_dict()
}

class AnnotationValidationError  {
    *annotation_type : String
    *error : String
    *field : String
    *message : String
}
note bottom: Raised when an error is\nencountered validating input


Metadata  |o..|{   Annotation
Annotation <|-- LabelAnnotation
Annotation <|-- PropertyChangeAnnotation
Annotation <|-- FieldsDescriptorAnnotation
FieldsDescriptorAnnotation <|-- ServiceExecutionAnnotation
Annotation <|-- TagAnnotation
@enduml